# This script is a rough prototype for thes use of pymagicc within REMIND
# Variables that in principle should be set as arguments (to be provided in the REMIND call)
# or configuration flags (to be set in a default configuration file and modified later) are
# marked with a #TODO comment.

#%%
import os
import pymagicc

#%%
# ============================ CONFIGURATION/ARGUMENTS ==============================

# Full path to the REMIND run
# #TODO argument. This should be provided by the REMIND script
run_path = '/p/projects/piam/abrahao/test_files/testOneRegi' + '/'

# Name of the .SCEN MAGICC scenario file to run
# #TODO argument. This should be provided by the REMIND script or inferred from run_path
# #TODO this is generated by REMIND/core/magicc.gms assuming defaults that could not 
# be compatible with other versions of MAGICC going forward. We should eventually
# replace that with something more generic, such as calling a script here on the interface
# that reads fulldata.gdx and handles compatibility
fname_emiscen = run_path + 'magicc/REMIND_testOneRegi.SCEN'

# MAGICC6 binary location. 
# #TODO configuraion (ideally via the environment variable MAGICC_EXECUTABLE_6, 
# which pymagicc/openscm expects)
# Since we don't have the MAGICC source code, this has to mimick the version
# expected by pymagicc. That means being in a /run subfolder and write output 
# to a /out subfolder
# This shell script does the job using PIKs in-house binaries 
# while we don't have source access
magicc6_binary = '/p/projects/piam/abrahao/magicc6/run/run_magicc6.sh'



# %%
# ============================ PRERUN ==============================

# emiscen = pymagicc.io.MAGICCData(fname_emiscen)

# Set the environment variable for pymagicc
os.environ["MAGICC_EXECUTABLE_6"] = magicc6_binary



#%%
fname_windows = '/p/projects/piam/abrahao/pymagicc/pymagicc/MAGICC6/run/RCP85.SCEN'
fname_linux = '/p/projects/piam/abrahao/magicc6/run/RCP85.SCEN'
#%%
# breader = pymagicc.io.base._Reader(poi)
# # breader = pymagicc.io.base._Reader(fname_emiscen)
# breader = pymagicc.io.base._Reader(fname_linux)
# breader._open_file()
# cleaned_lines = [line.strip() for line in breader._open_file().readlines() if line.strip()]
# cleaned_lines
# cleaned_lines.__len__()
# cleaned_lines[cleaned_lines.__len__()-2]

#%%
# breader = pymagicc.io._ScenReader(fname_emiscen)

# breader._set_lines()
# breader.lines

#%%
# with open(fname_emiscen) as f:
#     print(f.readlines())

#%%
# fname = fname_linux
fname = fname_emiscen

scenreader = pymagicc.io._ScenReader(fname)

# metadata, df, columns = scenreader.read()

scenreader._set_lines()
scenreader._stream = scenreader._get_stream()
header_notes_lines = scenreader._read_header()
# print(header_notes_lines)
df, columns = scenreader.read_data_block()
# header_notes_lines += scenreader._read_notes()

# number_years = int(scenreader.lines[0].strip())

# # go through datablocks until there are none left
# while True:
#     ch = {}
#     pos_block = scenreader._stream.tell()
#     region = convert_magicc_to_openscm_regions(scenreader._stream.readline().strip())

#     try:
#         variables = scenreader._read_data_header_line(scenreader._stream, ["YEARS", "YEAR"])
#     except IndexError:  # tried to get variables from empty string
#         break
#     except AssertionError:  # tried to get variables from a notes line
#         break

#     variables = convert_magicc6_to_magicc7_variables(variables)
#     ch["variable"] = convert_magicc7_to_openscm_variables(
#         [v + "_EMIS" for v in variables]
#     )

#     ch["unit"] = scenreader._read_data_header_line(scenreader._stream, ["Yrs", "YEARS"])

#     ch = scenreader._read_units(ch)
#     ch["todo"] = ["SET"] * len(variables)
#     ch["region"] = [region] * len(variables)

#     region_block = StringIO()
#     for i in range(number_years):
#         region_block.write(scenreader._stream.readline())
#     region_block.seek(0)

#     region_df = scenreader._convert_data_block_to_df(region_block)

#     try:
#         df = pd.concat([region_df, df], axis="columns")
#         columns = {key: ch[key] + columns[key] for key in columns}
#     except NameError:
#         df = region_df
#         columns = ch

# scenreader._stream.seek(pos_block)

# try:
#     return df, columns
# except NameError:
#     error_msg = (
#         "This is unexpected, please raise an issue on "
#         "https://github.com/openscm/pymagicc/issues"
#     )
#     raise Exception(error_msg)
